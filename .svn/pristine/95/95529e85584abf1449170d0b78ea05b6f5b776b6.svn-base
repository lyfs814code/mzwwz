package com.ytkl.mzwwz.web.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ytkl.mzwwz.aspect.ActionControllerLog;
import com.ytkl.mzwwz.base.ValidatorShow;
import com.ytkl.mzwwz.criteria.NewsBookCriteria;
import com.ytkl.mzwwz.domain.NewsBook;
import com.ytkl.mzwwz.domain.SysUser;
import com.ytkl.mzwwz.service.NewsBookService;
import com.ytkl.mzwwz.util.SessionUtil;

@Controller
public class NewsBookController {
	private static final Logger log = LoggerFactory.getLogger(NewsBookController.class);

	@Autowired
	private HttpSession session;
	
	@Autowired
	private NewsBookService newsBookService;

	@RequestMapping("/newsBook/list.do")
	public String list(NewsBookCriteria newsBookCriteria,ModelMap model) {
		List<NewsBook> newsBookList = newsBookService.listOnPage(newsBookCriteria);
		
		model.addAttribute("newsBookList", newsBookList);
		model.addAttribute("newsBookCriteria", newsBookCriteria);
		
		return "newsBook/list";
	}
	
	@ActionControllerLog(channel = "newsBook", action = "detail.do", title = "newsBook详细", isSaveRequestData = true)
	@RequestMapping("/newsBook/detail.do")
	public String detail(NewsBookCriteria newsBookCriteria,int id, HttpServletRequest request, ModelMap model) {
		NewsBook newsBook = newsBookService.select(id);

		model.addAttribute("newsBook", newsBook);
		model.addAttribute("newsBookCriteria", newsBookCriteria);

		return "newsBook/detail";
	}
	
	@RequestMapping("/newsBook/write.do")
	public String write(NewsBookCriteria newsBookCriteria, ModelMap model) {
		model.addAttribute("newsBookCriteria", newsBookCriteria);
		
		return "newsBook/write";
	}
	
	@RequestMapping("/newsBook/edit.do")
	public String edit(int id, NewsBookCriteria newsBookCriteria,ModelMap model) {
		NewsBook newsBook = newsBookService.select(id);
		
		model.addAttribute("newsBook", newsBook);
		model.addAttribute("newsBookCriteria", newsBookCriteria);
		
		return "newsBook/edit";
	}
	
	@ActionControllerLog(channel = "newsBook", action = "save.do", title = "新增newsBook", isSaveRequestData = true)
	@RequestMapping("/newsBook/save.do")
	public @ResponseBody String save(@Valid NewsBook newsBook,BindingResult result,ModelMap model) {
		if(result.hasErrors()){
			return  ValidatorShow.create().showErrors(result,model);
		}
		
		SysUser loginUser = (SysUser) session.getAttribute(SessionUtil.SESSION_USER);
		newsBook.setCreater(loginUser.getUserid());
		
		newsBookService.insert(newsBook);
		log.info("save acquisition id={}", newsBook.getId());
		
		return SessionUtil.FUN_SUCCESS_SAVE;
	}
	
	@ActionControllerLog(channel = "newsBook", action = "update.do", title = "修改newsBook", isSaveRequestData = true)
	@RequestMapping("/newsBook/update.do")
	public @ResponseBody String update(@Valid NewsBook newsBook,BindingResult result,NewsBookCriteria newsBookCriteria,ModelMap model) {
		if(result.hasErrors()){
			return  ValidatorShow.create().showErrors(result,model);
		}
		newsBookService.update(newsBook);
		log.info("update NewsBook id={}", newsBook.getId());
		
		return SessionUtil.FUN_SUCCESS_UPDATE;
	}
	
	@ActionControllerLog(channel = "newsBook", action = "delete.do", title = "删除newsBook", isSaveRequestData = true)
	@RequestMapping("/newsBook/delete.do")
	public @ResponseBody String delete(int id, NewsBookCriteria newsBookCriteria, ModelMap model) {
		newsBookService.delete(id);
		log.info("delete to newsBook id={}", id);
		
		return SessionUtil.FUN_SUCCESS_DEL;
	}
	
}
